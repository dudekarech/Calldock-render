version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: calldocker_postgres
    environment:
      POSTGRES_DB: calldocker
      POSTGRES_USER: calldocker
      POSTGRES_PASSWORD: calldocker_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - calldocker_network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: calldocker_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - calldocker_network

  # MinIO for file storage (recordings, audio files)
  minio:
    image: minio/minio:latest
    container_name: calldocker_minio
    environment:
      MINIO_ROOT_USER: calldocker
      MINIO_ROOT_PASSWORD: calldocker_dev
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - calldocker_network

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: docker/auth-service/Dockerfile
    container_name: calldocker_auth_service
    environment:
      DATABASE_URL: postgresql://calldocker:calldocker_dev@postgres:5432/calldocker
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      RUST_LOG: info
    ports:
      - "8081:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - calldocker_network

  # Call Service
  call-service:
    build:
      context: .
      dockerfile: docker/call-service/Dockerfile
    container_name: calldocker_call_service
    environment:
      DATABASE_URL: postgresql://calldocker:calldocker_dev@postgres:5432/calldocker
      REDIS_URL: redis://redis:6379
      WEBRTC_ICE_SERVERS: stun:stun.l.google.com:19302
      RUST_LOG: info
    ports:
      - "8082:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - calldocker_network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: calldocker_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - calldocker_network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: calldocker_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - calldocker_network

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  calldocker_network:
    driver: bridge
